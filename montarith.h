#ifndef MONTARITH_H
#define MONTARITH_H

#include<gmp.h>

//функция инициализации всех переменных для промежуточных вычислений.
//Должна вызываться при любом начале работы в представлении монтгомери
void mont_init(void);

//функция высвобождения памяти, занимаемыми переменными для промежуточных вычислений
//Должна вызываться после окончания работы с представлением монтгомери
void mont_clear(void);

//функция сложения двух чисел в представлении монтгомери, при заданном модуле
void mont_add(mpz_t result, mpz_srcptr x, mpz_srcptr y, mpz_srcptr p);

//функия умноежния двух чисел используя представлении монтгомери
//
//r -- используемая степень двойки используемая в представлении монтгомери
//должна быть >=\log_2(p)
//
//hint -- значение возвращаемое функцией mont_p_inv_neg, при аналогичных характеристиках
//Нужна для оптимизации работы программы. т.к. вычисления данного значения крайне трудоемкая задача
//если равно NULL, тогда будет вычислено принудительно
void mont_redc(mpz_t result, mpz_srcptr x, mpz_srcptr y, mpz_srcptr p, unsigned long r, mpz_srcptr p_inv_hint);

//удобная функция для прибавления к результату перемножения двух чисел. Параметры аналогичные функции mont_redc
void mont_addredc(mpz_t result, mpz_srcptr x, mpz_srcptr y, mpz_srcptr p, unsigned long r, mpz_srcptr p_inv_hint);

//функция возведения в степень числа используя представление монтгомери.
void mont_pow(mpz_t result, mpz_srcptr x, mpz_srcptr pow, mpz_srcptr p, unsigned long r, mpz_srcptr p_inv_hint);

//функция получения -p^(-1) к p в кольце r^2. Необходимое в умноежнии используя представлении монтгомери.
void mont_p_inv_neg(mpz_t result, mpz_srcptr p, unsigned long r);


// важно заметить, что входные параметры и результат в данных функциях
// могут быть одной и той же переменной. Функции будут работать с ними абсолютно нормально
// пример: mont_redc(x, x, x, p, r, NULL);



#endif // MONTARITH_H
