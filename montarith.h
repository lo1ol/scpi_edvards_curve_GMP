#ifndef MONTARITH_H
#define MONTARITH_H

#include<gmp.h>

/**
 * @brief mont_init функция инициализации всех переменных для промежуточных вычислений.
 *
 * Должна вызываться при любом начале работы в представлении монтгомери
 */
void mont_init(void);

/**
 * @brief mont_clear функция высвобождения памяти, занимаемыми переменными для промежуточных вычислений
 *
 * Должна вызываться после окончания работы с представлением монтгомери
 */
void mont_clear(void);

/**
 * @brief mont_add функция сложения двух чисел в представлении монтгомери, при заданном модуле
 * @param result результат \f$ x + y \f$ в монтгомери (по сути просто взятие по модулю \f$ p \f$ после сложения)
 * @param x точка \f$ x \f$
 * @param y точка \f$ y \f$
 * @param p модуль \f$ p \f$ по котоому производятся вычисления
 */
void mont_add(mpz_t result, mpz_srcptr x, mpz_srcptr y, mpz_srcptr p);

/**
 * @brief mont_redc функия умноежния двух чисел используя представлении монтгомери
 *
 * Алгоритм используемый при вчислении имеет следующий вид
 *  1. \f$ t = x * y \f$
 *  2. \f$ s = (t * -p^{-1} mod 2^r) p \f$
 *  3. \f$ result = (t+s)/r mod p \f$
 *
 * @param result Результат умножения двух точек в арифметике мотгомери
 * @param x точка \f$ x \f$
 * @param y точка \f$ y \f$
 * @param p модуль \f$ p \f$ по котоому производятся вычисления
 * @param r используемая степень двойки используемая в представлении монтгомери (должна быть \f$ r \ge \log_2{p} \f$)
 * @param p_inv_hint подсказка \f$ -p^{-1} p \f$ при вычислениях (не обязательна, но дает выигрышь в производительности)
 */
void mont_redc(mpz_t result, mpz_srcptr x, mpz_srcptr y, mpz_srcptr p, unsigned long r, mpz_srcptr p_inv_hint);

/**
 * @brief mont_addredc удобная функция для прибавления к результату перемножения двух чисел
 * @param result  \f$ result = result + x*y\f$
 * @param x точка \f$ x \f$
 * @param y точка \f$ y \f$
 * @param p модуль \f$ p \f$ по котоому производятся вычисления
 * @param r используемая степень двойки используемая в представлении монтгомери (должна быть \f$ r \ge \log_2{p} \f$)
 * @param hint подсказка \f$ -p^{-1} p \f$ при вычислениях (не обязательна, но дает выигрышь в производительности)
 */
void mont_addredc(mpz_t result, mpz_srcptr x, mpz_srcptr y, mpz_srcptr p, unsigned long r, mpz_srcptr hint);

/**
 * @brief mont_pow функция возведения в степень числа используя представление монтгомери.
 *
 * Использует лесенку Монтгомери для сглаживания потребляемого времени при вычислениях
 *
 * @param result результат возведения в степень
 * @param x точка, которую возводим в степень
 * @param pow степень, в которую возводим
 * @param p простое число, по модуль которого происходят вычисления
 * @param r используемая степень двойки используемая в представлении монтгомери (должна быть \f$ r \ge \log_2{p} \f$)
 * @param p_inv_hint подсказка \f$ -p^{-1} p \f$ при вычислениях (не обязательна, но дает выигрышь в производительности)
 */
void mont_pow(mpz_t result, mpz_srcptr x, mpz_srcptr pow, mpz_srcptr p, unsigned long r, mpz_srcptr p_inv_hint);

/**
 * @brief mont_p_inv_neg функция получения \f$ -p^{-1} \f$ к p в кольце \f$ 2^r \f$. Необходимое в умноежнии используя представлении монтгомери.
 * @param result результат, куда будет положен \f$ -p^{-1} \f$
 * @param p простое число, по модуль которого происходят вычисления
 * @param r используемая степень двойки используемая в представлении монтгомери (должна быть \f$ r \ge \log_2{p} \f$)
 */
void mont_p_inv_neg(mpz_t result, mpz_srcptr p, unsigned long r);



#endif // MONTARITH_H
